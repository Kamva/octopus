// Code generated by mockery v1.0.0. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"
import sql "database/sql"

// SQLRows is an autogenerated mock type for the SQLRows type
type SQLRows struct {
	mock.Mock
	called int
	limit  int
}

// Close provides a mock function with given fields:
func (_m *SQLRows) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ColumnTypes provides a mock function with given fields:
func (_m *SQLRows) ColumnTypes() ([]*sql.ColumnType, error) {
	ret := _m.Called()

	var r0 []*sql.ColumnType
	if rf, ok := ret.Get(0).(func() []*sql.ColumnType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ColumnType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Columns provides a mock function with given fields:
func (_m *SQLRows) Columns() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Err provides a mock function with given fields:
func (_m *SQLRows) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *SQLRows) Next() bool {
	ret := _m.Called()
	_m.called++

	// reached the end of results, return false anyway
	if _m.called > _m.limit && _m.limit > 0 {
		return false
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NextResultSet provides a mock function with given fields:
func (_m *SQLRows) NextResultSet() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Scan provides a mock function with given fields: dest
func (_m *SQLRows) Scan(dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *SQLRows) SetLimit(n int) {
	_m.limit = n
}
