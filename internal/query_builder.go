// Code generated by mockery v1.0.0. DO NOT EDIT.

package internal

import base "github.com/kamva/octopus/base"
import mock "github.com/stretchr/testify/mock"

// QueryBuilder is an autogenerated mock type for the QueryBuilder type
type QueryBuilder struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *QueryBuilder) All() (base.RecordDataSet, error) {
	ret := _m.Called()

	var r0 base.RecordDataSet
	if rf, ok := ret.Get(0).(func() base.RecordDataSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.RecordDataSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Count provides a mock function with given fields:
func (_m *QueryBuilder) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields:
func (_m *QueryBuilder) Delete() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// First provides a mock function with given fields:
func (_m *QueryBuilder) First() (base.RecordData, error) {
	ret := _m.Called()

	var r0 base.RecordData
	if rf, ok := ret.Get(0).(func() base.RecordData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(base.RecordData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Limit provides a mock function with given fields: n
func (_m *QueryBuilder) Limit(n int) base.QueryBuilder {
	ret := _m.Called(n)

	var r0 base.QueryBuilder
	if rf, ok := ret.Get(0).(func(int) base.QueryBuilder); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.QueryBuilder)
		}
	}

	return r0
}

// OrderBy provides a mock function with given fields: sorts
func (_m *QueryBuilder) OrderBy(sorts ...base.Sort) base.QueryBuilder {
	_va := make([]interface{}, len(sorts))
	for _i := range sorts {
		_va[_i] = sorts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 base.QueryBuilder
	if rf, ok := ret.Get(0).(func(...base.Sort) base.QueryBuilder); ok {
		r0 = rf(sorts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.QueryBuilder)
		}
	}

	return r0
}

// Skip provides a mock function with given fields: n
func (_m *QueryBuilder) Skip(n int) base.QueryBuilder {
	ret := _m.Called(n)

	var r0 base.QueryBuilder
	if rf, ok := ret.Get(0).(func(int) base.QueryBuilder); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.QueryBuilder)
		}
	}

	return r0
}

// Update provides a mock function with given fields: data
func (_m *QueryBuilder) Update(data base.RecordData) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(base.RecordData) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(base.RecordData) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
