// Code generated by mockery v1.0.0. DO NOT EDIT.

package internal

import bson "github.com/globalsign/mgo/bson"
import mgo "github.com/globalsign/mgo"
import mock "github.com/stretchr/testify/mock"
import time "time"

// MongoSession is an autogenerated mock type for the MongoSession type
type MongoSession struct {
	mock.Mock
}

// BuildInfo provides a mock function with given fields:
func (_m *MongoSession) BuildInfo() (mgo.BuildInfo, error) {
	ret := _m.Called()

	var r0 mgo.BuildInfo
	if rf, ok := ret.Get(0).(func() mgo.BuildInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mgo.BuildInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clone provides a mock function with given fields:
func (_m *MongoSession) Clone() *mgo.Session {
	ret := _m.Called()

	var r0 *mgo.Session
	if rf, ok := ret.Get(0).(func() *mgo.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Session)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MongoSession) Close() {
	_m.Called()
}

// Copy provides a mock function with given fields:
func (_m *MongoSession) Copy() *mgo.Session {
	ret := _m.Called()

	var r0 *mgo.Session
	if rf, ok := ret.Get(0).(func() *mgo.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Session)
		}
	}

	return r0
}

// DB provides a mock function with given fields: name
func (_m *MongoSession) DB(name string) *mgo.Database {
	ret := _m.Called(name)

	var r0 *mgo.Database
	if rf, ok := ret.Get(0).(func(string) *mgo.Database); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Database)
		}
	}

	return r0
}

// DatabaseNames provides a mock function with given fields:
func (_m *MongoSession) DatabaseNames() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnsureSafe provides a mock function with given fields: safe
func (_m *MongoSession) EnsureSafe(safe *mgo.Safe) {
	_m.Called(safe)
}

// FindRef provides a mock function with given fields: ref
func (_m *MongoSession) FindRef(ref *mgo.DBRef) *mgo.Query {
	ret := _m.Called(ref)

	var r0 *mgo.Query
	if rf, ok := ret.Get(0).(func(*mgo.DBRef) *mgo.Query); ok {
		r0 = rf(ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Query)
		}
	}

	return r0
}

// Fsync provides a mock function with given fields: async
func (_m *MongoSession) Fsync(async bool) error {
	ret := _m.Called(async)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(async)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FsyncLock provides a mock function with given fields:
func (_m *MongoSession) FsyncLock() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FsyncUnlock provides a mock function with given fields:
func (_m *MongoSession) FsyncUnlock() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LiveServers provides a mock function with given fields:
func (_m *MongoSession) LiveServers() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Login provides a mock function with given fields: cred
func (_m *MongoSession) Login(cred *mgo.Credential) error {
	ret := _m.Called(cred)

	var r0 error
	if rf, ok := ret.Get(0).(func(*mgo.Credential) error); ok {
		r0 = rf(cred)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogoutAll provides a mock function with given fields:
func (_m *MongoSession) LogoutAll() {
	_m.Called()
}

// Mode provides a mock function with given fields:
func (_m *MongoSession) Mode() mgo.Mode {
	ret := _m.Called()

	var r0 mgo.Mode
	if rf, ok := ret.Get(0).(func() mgo.Mode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mgo.Mode)
	}

	return r0
}

// New provides a mock function with given fields:
func (_m *MongoSession) New() *mgo.Session {
	ret := _m.Called()

	var r0 *mgo.Session
	if rf, ok := ret.Get(0).(func() *mgo.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Session)
		}
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *MongoSession) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Refresh provides a mock function with given fields:
func (_m *MongoSession) Refresh() {
	_m.Called()
}

// ResetIndexCache provides a mock function with given fields:
func (_m *MongoSession) ResetIndexCache() {
	_m.Called()
}

// Run provides a mock function with given fields: cmd, result
func (_m *MongoSession) Run(cmd interface{}, result interface{}) error {
	ret := _m.Called(cmd, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(cmd, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Safe provides a mock function with given fields:
func (_m *MongoSession) Safe() *mgo.Safe {
	ret := _m.Called()

	var r0 *mgo.Safe
	if rf, ok := ret.Get(0).(func() *mgo.Safe); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Safe)
		}
	}

	return r0
}

// SelectServers provides a mock function with given fields: tags
func (_m *MongoSession) SelectServers(tags ...bson.D) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// SetBatch provides a mock function with given fields: n
func (_m *MongoSession) SetBatch(n int) {
	_m.Called(n)
}

// SetBypassValidation provides a mock function with given fields: bypass
func (_m *MongoSession) SetBypassValidation(bypass bool) {
	_m.Called(bypass)
}

// SetCursorTimeout provides a mock function with given fields: d
func (_m *MongoSession) SetCursorTimeout(d time.Duration) {
	_m.Called(d)
}

// SetMode provides a mock function with given fields: consistency, refresh
func (_m *MongoSession) SetMode(consistency mgo.Mode, refresh bool) {
	_m.Called(consistency, refresh)
}

// SetPoolLimit provides a mock function with given fields: limit
func (_m *MongoSession) SetPoolLimit(limit int) {
	_m.Called(limit)
}

// SetPoolTimeout provides a mock function with given fields: timeout
func (_m *MongoSession) SetPoolTimeout(timeout time.Duration) {
	_m.Called(timeout)
}

// SetPrefetch provides a mock function with given fields: p
func (_m *MongoSession) SetPrefetch(p float64) {
	_m.Called(p)
}

// SetSafe provides a mock function with given fields: safe
func (_m *MongoSession) SetSafe(safe *mgo.Safe) {
	_m.Called(safe)
}

// SetSocketTimeout provides a mock function with given fields: d
func (_m *MongoSession) SetSocketTimeout(d time.Duration) {
	_m.Called(d)
}

// SetSyncTimeout provides a mock function with given fields: d
func (_m *MongoSession) SetSyncTimeout(d time.Duration) {
	_m.Called(d)
}
