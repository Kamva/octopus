// Code generated by mockery v1.0.0. DO NOT EDIT.

package internal

import base "github.com/Kamva/octopus/base"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// CreateTable provides a mock function with given fields: tableName, info
func (_m *Client) CreateTable(tableName string, info base.TableInfo) error {
	ret := _m.Called(tableName, info)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, base.TableInfo) error); ok {
		r0 = rf(tableName, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: tableName, id
func (_m *Client) DeleteByID(tableName string, id interface{}) error {
	ret := _m.Called(tableName, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(tableName, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureIndex provides a mock function with given fields: tableName, index
func (_m *Client) EnsureIndex(tableName string, index base.Index) error {
	ret := _m.Called(tableName, index)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, base.Index) error); ok {
		r0 = rf(tableName, index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: tableName, id
func (_m *Client) FindByID(tableName string, id interface{}) (base.RecordData, error) {
	ret := _m.Called(tableName, id)

	var r0 base.RecordData
	if rf, ok := ret.Get(0).(func(string, interface{}) base.RecordData); ok {
		r0 = rf(tableName, id)
	} else {
		r0 = ret.Get(0).(base.RecordData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(tableName, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: tableName, data
func (_m *Client) Insert(tableName string, data *base.RecordData) error {
	ret := _m.Called(tableName, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *base.RecordData) error); ok {
		r0 = rf(tableName, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: tableName, conditions
func (_m *Client) Query(tableName string, conditions ...base.Condition) base.QueryBuilder {
	_va := make([]interface{}, len(conditions))
	for _i := range conditions {
		_va[_i] = conditions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tableName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 base.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, ...base.Condition) base.QueryBuilder); ok {
		r0 = rf(tableName, conditions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.QueryBuilder)
		}
	}

	return r0
}

// UpdateByID provides a mock function with given fields: tableName, id, data
func (_m *Client) UpdateByID(tableName string, id interface{}, data base.RecordData) error {
	ret := _m.Called(tableName, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, base.RecordData) error); ok {
		r0 = rf(tableName, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
