// Code generated by mockery v1.0.0. DO NOT EDIT.

package internal

import bson "github.com/globalsign/mgo/bson"
import mgo "github.com/globalsign/mgo"
import mock "github.com/stretchr/testify/mock"

// MongoCollection is an autogenerated mock type for the MongoCollection type
type MongoCollection struct {
	mock.Mock
}

// Bulk provides a mock function with given fields:
func (_m *MongoCollection) Bulk() *mgo.Bulk {
	ret := _m.Called()

	var r0 *mgo.Bulk
	if rf, ok := ret.Get(0).(func() *mgo.Bulk); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Bulk)
		}
	}

	return r0
}

// Count provides a mock function with given fields:
func (_m *MongoCollection) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: info
func (_m *MongoCollection) Create(info *mgo.CollectionInfo) error {
	ret := _m.Called(info)

	var r0 error
	if rf, ok := ret.Get(0).(func(*mgo.CollectionInfo) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropAllIndexes provides a mock function with given fields:
func (_m *MongoCollection) DropAllIndexes() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropCollection provides a mock function with given fields:
func (_m *MongoCollection) DropCollection() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropIndex provides a mock function with given fields: key
func (_m *MongoCollection) DropIndex(key ...string) error {
	_va := make([]interface{}, len(key))
	for _i := range key {
		_va[_i] = key[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(key...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropIndexName provides a mock function with given fields: name
func (_m *MongoCollection) DropIndexName(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureIndex provides a mock function with given fields: index
func (_m *MongoCollection) EnsureIndex(index mgo.Index) error {
	ret := _m.Called(index)

	var r0 error
	if rf, ok := ret.Get(0).(func(mgo.Index) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureIndexKey provides a mock function with given fields: key
func (_m *MongoCollection) EnsureIndexKey(key ...string) error {
	_va := make([]interface{}, len(key))
	for _i := range key {
		_va[_i] = key[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(key...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: query
func (_m *MongoCollection) Find(query interface{}) *mgo.Query {
	ret := _m.Called(query)

	var r0 *mgo.Query
	if rf, ok := ret.Get(0).(func(interface{}) *mgo.Query); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Query)
		}
	}

	return r0
}

// FindId provides a mock function with given fields: id
func (_m *MongoCollection) FindId(id interface{}) *mgo.Query {
	ret := _m.Called(id)

	var r0 *mgo.Query
	if rf, ok := ret.Get(0).(func(interface{}) *mgo.Query); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Query)
		}
	}

	return r0
}

// Indexes provides a mock function with given fields:
func (_m *MongoCollection) Indexes() ([]mgo.Index, error) {
	ret := _m.Called()

	var r0 []mgo.Index
	if rf, ok := ret.Get(0).(func() []mgo.Index); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mgo.Index)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: docs
func (_m *MongoCollection) Insert(docs ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, docs...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(docs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIter provides a mock function with given fields: session, firstBatch, cursorID, err
func (_m *MongoCollection) NewIter(session *mgo.Session, firstBatch []bson.Raw, cursorID int64, err error) *mgo.Iter {
	ret := _m.Called(session, firstBatch, cursorID, err)

	var r0 *mgo.Iter
	if rf, ok := ret.Get(0).(func(*mgo.Session, []bson.Raw, int64, error) *mgo.Iter); ok {
		r0 = rf(session, firstBatch, cursorID, err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Iter)
		}
	}

	return r0
}

// Pipe provides a mock function with given fields: pipeline
func (_m *MongoCollection) Pipe(pipeline interface{}) *mgo.Pipe {
	ret := _m.Called(pipeline)

	var r0 *mgo.Pipe
	if rf, ok := ret.Get(0).(func(interface{}) *mgo.Pipe); ok {
		r0 = rf(pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Pipe)
		}
	}

	return r0
}

// Remove provides a mock function with given fields: selector
func (_m *MongoCollection) Remove(selector interface{}) error {
	ret := _m.Called(selector)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(selector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAll provides a mock function with given fields: selector
func (_m *MongoCollection) RemoveAll(selector interface{}) (*mgo.ChangeInfo, error) {
	ret := _m.Called(selector)

	var r0 *mgo.ChangeInfo
	if rf, ok := ret.Get(0).(func(interface{}) *mgo.ChangeInfo); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.ChangeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveId provides a mock function with given fields: id
func (_m *MongoCollection) RemoveId(id interface{}) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repair provides a mock function with given fields:
func (_m *MongoCollection) Repair() *mgo.Iter {
	ret := _m.Called()

	var r0 *mgo.Iter
	if rf, ok := ret.Get(0).(func() *mgo.Iter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Iter)
		}
	}

	return r0
}

// Update provides a mock function with given fields: selector, update
func (_m *MongoCollection) Update(selector interface{}, update interface{}) error {
	ret := _m.Called(selector, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(selector, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAll provides a mock function with given fields: selector, update
func (_m *MongoCollection) UpdateAll(selector interface{}, update interface{}) (*mgo.ChangeInfo, error) {
	ret := _m.Called(selector, update)

	var r0 *mgo.ChangeInfo
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) *mgo.ChangeInfo); ok {
		r0 = rf(selector, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.ChangeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}) error); ok {
		r1 = rf(selector, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateId provides a mock function with given fields: id, update
func (_m *MongoCollection) UpdateId(id interface{}, update interface{}) error {
	ret := _m.Called(id, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(id, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: selector, update
func (_m *MongoCollection) Upsert(selector interface{}, update interface{}) (*mgo.ChangeInfo, error) {
	ret := _m.Called(selector, update)

	var r0 *mgo.ChangeInfo
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) *mgo.ChangeInfo); ok {
		r0 = rf(selector, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.ChangeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}) error); ok {
		r1 = rf(selector, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertId provides a mock function with given fields: id, update
func (_m *MongoCollection) UpsertId(id interface{}, update interface{}) (*mgo.ChangeInfo, error) {
	ret := _m.Called(id, update)

	var r0 *mgo.ChangeInfo
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) *mgo.ChangeInfo); ok {
		r0 = rf(id, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.ChangeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}) error); ok {
		r1 = rf(id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: pipeline, options
func (_m *MongoCollection) Watch(pipeline interface{}, options mgo.ChangeStreamOptions) (*mgo.ChangeStream, error) {
	ret := _m.Called(pipeline, options)

	var r0 *mgo.ChangeStream
	if rf, ok := ret.Get(0).(func(interface{}, mgo.ChangeStreamOptions) *mgo.ChangeStream); ok {
		r0 = rf(pipeline, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.ChangeStream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, mgo.ChangeStreamOptions) error); ok {
		r1 = rf(pipeline, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// With provides a mock function with given fields: s
func (_m *MongoCollection) With(s *mgo.Session) *mgo.Collection {
	ret := _m.Called(s)

	var r0 *mgo.Collection
	if rf, ok := ret.Get(0).(func(*mgo.Session) *mgo.Collection); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Collection)
		}
	}

	return r0
}
